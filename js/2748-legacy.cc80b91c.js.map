{"version":3,"file":"js/2748-legacy.cc80b91c.js","mappings":"sSAmBMA,GAAmB,kBACpBC,EAAAA,GADiB,IAEpBC,SAAS,EACTC,gBAAgB,EAChBC,YAAY,IAId,EAAeC,EAAAA,EAAAA,OAAe,CAC5BC,KAAM,iBAENC,MAAO,CACLC,cAAe,CACbC,KAAMC,QACNC,SAAS,GAEXC,gBAAiB,CACfH,KAAMC,QACNC,SAAS,GAEXE,OAAQ,CACNJ,KAAMK,SACNH,QAAS,SAACI,EAAWC,EAAmBC,GACtC,OAAOA,EAASC,oBAAoBC,QAAQH,EAAUE,sBAAwB,IAGlFE,WAAYV,QACZW,UAAW,CACTZ,KAAMJ,EAAAA,EAAAA,QAAAA,MAAAA,UAAAA,KACNM,QAAS,kBAAMX,IAEjBsB,SAAUZ,QACVa,YAAa,CACXd,KAAMe,SAIVC,KA7B4B,WA8B1B,MAAO,CACLC,WAAYC,KAAKJ,cAIrBK,SAAU,CACRC,QADQ,WAEN,yBACKxB,EAAAA,EAAAA,QAAAA,SAAAA,QAAAA,KAAsCsB,OAD3C,IAEE,kBAAkB,EAClB,qCAAsCA,KAAKG,eAAiB,KAGhEC,cARQ,WASN,OAAOJ,KAAKK,eAEdC,eAXQ,WAWM,WACZ,OAAON,KAAKO,cAAcC,KAAI,SAAApB,GAAI,OAAI,EAAKqB,SAASrB,OAEtDsB,kBAdQ,WAcS,WACf,OAAOV,KAAKW,aACRX,KAAKK,cAAcO,MAAK,SAAAxB,GAAI,OAAK,EAAKyB,QAAQzB,MAC9CY,KAAKK,cAAcS,OAAS,GAElCC,aAnBQ,WAoBN,OAAyB,MAArBf,KAAKgB,aAA6B,EAE/BnB,OAAOG,KAAKiB,QAAQjB,KAAKgB,eAAeF,QAEjDT,cAxBQ,WAwBK,WACX,OAAKL,KAAKkB,aAAelB,KAAKL,UAAmC,MAAvBK,KAAKmB,eAA+BnB,KAAKoB,SAE5EpB,KAAKoB,SAASlC,QAAO,SAAAE,GAC1B,IAAMiC,GAAQC,EAAAA,EAAAA,IAAoBlC,EAAM,EAAKE,UACvCiC,EAAgB,MAATF,EAAgBxB,OAAOwB,GAAS,GAE7C,OAAO,EAAKnC,OAAOE,EAAMS,OAAO,EAAKsB,gBAAiBI,OAG1DJ,eAAgB,CACdK,IADc,WAEZ,OAAOxB,KAAKD,YAEd0B,IAJc,SAITC,GAGC1B,KAAKD,aAAe2B,IACtB1B,KAAKD,WAAa2B,EAClB1B,KAAK2B,MAAM,sBAAuBD,MAIxCE,kBA/CQ,WAgDN,OAAO,GAETC,QAlDQ,WAmDN,OAAO7B,KAAK8B,eAAiB9B,KAAKO,cAAcO,OAAS,GAE3DI,YArDQ,WAsDN,OACElB,KAAK+B,UACL/B,KAAK8B,eAEL9B,KAAK8B,eACL9B,KAAKmB,iBAAmBnB,KAAKiB,QAAQjB,KAAKgB,eAG9CgB,YA9DQ,WA+DN,QAAKhC,KAAKiC,YAEHjC,KAAKU,oBAAsBV,KAAKP,aAEzCyC,YAnEQ,WAoEN,IAAMtD,EAAQF,EAAAA,EAAAA,QAAAA,SAAAA,YAAAA,KAA0CsB,MAExD,OADCpB,EAAcuD,aAAe,kCAA4BvD,EAAcuD,cAAgB,IAAKC,QAC7F,kBACK/D,GACAO,IAGPkD,cA3EQ,WA4EN,OAA8B,MAAvB9B,KAAKmB,gBACc,KAAxBnB,KAAKmB,gBAETH,aA/EQ,WA+EI,WACV,OAAIhB,KAAK+B,SAAiB,KAEnB/B,KAAKO,cAAc8B,MAAK,SAAAC,GAC7B,OAAO,EAAKC,gBAAgB,EAAK9B,SAAS6B,GAAI,EAAK7B,SAAS,EAAK+B,oBAGrEC,SAtFQ,WAuFN,IAAM3C,EAAOpB,EAAAA,EAAAA,QAAAA,SAAAA,SAAAA,KAAuCsB,MAapD,OAXAF,EAAKlB,OAAL,kBACKkB,EAAKlB,OADV,IAEE8D,MAAO1C,KAAK2C,iBACZhD,SACEK,KAAKL,WACJK,KAAKkB,cACLlB,KAAKK,cAAcS,OAEtBlB,YAAaI,KAAKmB,iBAGbrB,IAIX8C,MAAO,CACLvC,cAAe,yBACfmC,cAAe,YACfP,UAHK,SAGMP,GACLA,GACFmB,SAASC,iBAAiB,OAAQ9C,KAAK+C,QACvC/C,KAAKgD,MAAMC,OAASjD,KAAKgD,MAAMC,MAAMC,WAErCL,SAASM,oBAAoB,OAAQnD,KAAK+C,QAC1C/C,KAAKoD,OACLpD,KAAKqD,eAGTC,aAbK,SAaS5B,IACRA,GAAQ1B,KAAKuD,UAEjBvD,KAAKD,WAAa,OAEpB2C,MAlBK,SAkBEhB,EAAK8B,GAONA,GAAUA,EAAO1C,SACnBd,KAAKP,aACLO,KAAKiC,WACJjC,KAAKsD,eACN5B,EAAIZ,QACJd,KAAKyD,gBAET7D,YAhCK,SAgCQ8B,GACX1B,KAAKD,WAAa2B,GAEpBP,eAAgB,0BAChB7B,SAAU,cAGZoE,QAlL4B,WAmL1B1D,KAAK2D,aAGPC,UAtL4B,WAuL1Bf,SAASM,oBAAoB,OAAQnD,KAAK+C,SAG5Cc,QAAS,CACPC,uBADO,SACiBpC,EAAc8B,GAAe,WAGnD,GAAI9B,IAAQ8B,EAAZ,CAEA,IAAKxD,KAAKf,gBAAiB,CACzB,IAAM8E,EAAkBP,EAAOxD,KAAKgD,MAAMgB,KAAKC,WAE3CF,EACF/D,KAAKkE,aAAaxC,EAAIyC,WAAU,SAAA7B,GAAC,OAAIA,IAAMyB,MAE3C/D,KAAKkE,cAAc,GAErBlE,KAAK2B,MAAM,oBAAqB3B,KAAKgD,MAAMgB,KAAKC,WAGlDjE,KAAKoE,WAAU,WAEV,EAAKjD,iBACU,IAAfO,EAAIZ,QACF,EAAK7B,mBAGV,EAAK+D,MAAMgB,KAAKK,WAEZ,EAAKpF,iBAAmByC,EAAIZ,SAC9B,EAAKoD,aAAa,GAClB,EAAKvC,MAAM,oBAAqB,EAAKqB,MAAMgB,KAAKC,kBAItDK,wBAhCO,WAiCLtE,KAAKuE,wBAEPA,qBAnCO,WAqCLvE,KAAKsD,cAAgBtD,KAAKgD,MAAMgB,MAAQhE,KAAKgD,MAAMgB,KAAKQ,oBAE1DC,oBAvCO,SAuCcC,GAGf1E,KAAK8B,gBAEL9B,KAAK+B,UAAY2C,IAAYC,EAAAA,GAAAA,MACH,IAAxB3E,KAAKG,cACPH,KAAKG,cAAgBH,KAAKO,cAAcO,OAAS,EAEjDd,KAAKG,gBAEEH,KAAK+B,UAAY2C,IAAYC,EAAAA,GAAAA,MAClC3E,KAAKG,eAAiBH,KAAKO,cAAcO,OAAS,EACpDd,KAAKG,eAAiB,EAEtBH,KAAKG,gBAEEuE,IAAYC,EAAAA,GAAAA,WAAsBD,IAAYC,EAAAA,GAAAA,WACvD3E,KAAK4E,sBAGTA,kBA5DO,WA6DL,IAAMC,EAAW7E,KAAKG,cAChB2E,EAAU9E,KAAKO,cAAcsE,GAGnC,GACG7E,KAAK+E,gBACN/E,KAAKgF,YAAYF,GAFnB,CAKA,IAAMG,EAAYjF,KAAKO,cAAcO,OAAS,EAI9C,IAC0B,IAAxBd,KAAKG,eACS,IAAd8E,EAFF,CASA,IAAMnE,EAASd,KAAKO,cAAcO,OAC5BoE,EAAYL,IAAa/D,EAAS,EACpC+D,EACAA,EAAW,EACTM,EAAWnF,KAAKO,cAAc2E,GAE/BC,EAGHnF,KAAKoF,WAAWN,GAFhB9E,KAAKqF,SAASrF,KAAK+B,SAAW,GAAK,MAKrC/B,KAAKG,cAAgB+E,OAjBnBlF,KAAKG,cAAgB8E,IAmBzBK,kBAjGO,WAkGLtF,KAAKmB,eAAiB,KAEtBzC,EAAAA,EAAAA,QAAAA,QAAAA,kBAAAA,KAA+CsB,OAEjDuF,SAtGO,WAuGL,IAAMtC,EAAQuC,EAAAA,EAAAA,QAAAA,QAAAA,SAAAA,KAAyCxF,MAUvD,OARAiD,EAAMnD,MAAO2F,EAAAA,EAAAA,IAAUxC,EAAMnD,KAAO,CAClC4F,MAAO,CACL,yBAAyBC,EAAAA,EAAAA,IAAqB3F,KAAKgD,MAAMgB,KAAM,iBAC/D4B,cAAcD,EAAAA,EAAAA,IAAqB1C,EAAMnD,KAAO,qBAAsB,QAExE+F,SAAU,CAAExE,MAAOrB,KAAKmB,kBAGnB8B,GAET6C,aAnHO,WAoHL,IAAMC,EAAOrH,EAAAA,EAAAA,QAAAA,QAAAA,aAAAA,KAA0CsB,MAIvD,OAFA+F,EAAKjG,KAAM4F,MAAOM,KAAO,WAElBD,GAETE,cA1HO,WA2HL,OAAOjG,KAAKuD,SAAWvD,KAAK+B,SACxBrD,EAAAA,EAAAA,QAAAA,QAAAA,cAAAA,KAA2CsB,MAC3C,IAENkG,QA/HO,SA+HEC,GACFnG,KAAK+E,gBAEV/E,KAAKG,eAAiB,EACjBH,KAAKG,eAAiB,EACvBH,KAAKoG,UAEJpG,KAAKqG,cAAcF,EAAEG,SAAStG,KAAKyD,iBAE1C8C,QAxIO,SAwIEJ,GACP,KACEnG,KAAKG,eAAiB,IACrBgG,EAAEG,OAFL,CAKA,IAAMA,EAASH,EAAEG,OACXjF,EAAQiF,EAAOjF,MAGjBiF,EAAOjF,OAAOrB,KAAKyD,eAElBzD,KAAK+B,UAAsB,KAAVV,GAAcrB,KAAK4E,oBAEzC5E,KAAKmB,eAAiBE,EACtBrB,KAAKwG,SAAWF,EAAOG,UAAYH,EAAOG,SAASD,WAErDE,UAzJO,SAyJIP,GACT,IAAMzB,EAAUyB,EAAEzB,SAGhByB,EAAEQ,SACD,CAAChC,EAAAA,GAAAA,KAAeA,EAAAA,GAAAA,KAAciC,SAASlC,IAExChG,EAAAA,EAAAA,QAAAA,QAAAA,UAAAA,KAAuCsB,KAAMmG,GAO/CnG,KAAKyE,oBAAoBC,IAE3BmC,YAzKO,SAyKMV,KACbW,UA1KO,SA0KIX,GACTzH,EAAAA,EAAAA,QAAAA,QAAAA,UAAAA,KAAuCsB,KAAMmG,GAC7CnG,KAAKqD,cAEP0D,SA9KO,SA8KGZ,GAERA,EAAEa,iBAKFhH,KAAKyD,gBAEP2B,WAvLO,SAuLKhG,GACVV,EAAAA,EAAAA,QAAAA,QAAAA,WAAAA,KAAwCsB,KAAMZ,GAC9CY,KAAK2D,aAEPsD,iBA3LO,WA4LLvI,EAAAA,EAAAA,QAAAA,QAAAA,iBAAAA,KAA8CsB,MAIzCA,KAAKiC,WAAWjC,KAAK2D,aAE5BA,UAlMO,WAkME,WAGP3D,KAAKoE,WAAU,WAEV,EAAKrC,UACL,EAAKZ,gBACL,EAAKmC,eAEN,EAAKnC,gBACF,EAAKZ,cAAcO,QACpB,EAAKiB,UACL,EAAKwB,QAEH,KACA,EAAKtC,QAAQ,EAAKD,mBAI5BqC,WArNO,YAuNFrD,KAAK8B,eACL9B,KAAKwC,iBAILxC,KAAK+B,UACL/B,KAAKuC,gBACJvC,KAAKmB,eACLnB,KAAKS,SAAST,KAAKwC,iBAGrBxC,KAAK2D,cAGT9C,QArOO,SAqOEzB,GACP,OAAOY,KAAKM,eAAed,QAAQQ,KAAKS,SAASrB,KAAU,GAE7D2D,OAxOO,SAwOCmE,GAAqB,QAC3B,IAA4B,IAAxBlH,KAAKG,cAAT,CAEA,IAAMgH,EAAcnH,KAAKO,cAAcP,KAAKG,eACtCiH,EAAkBpH,KAAKiB,QAAQkG,GACrC,SAAAD,EAAMG,gBAAN,EAAqBC,QAAQ,aAAcF,GAC3C,SAAAF,EAAMG,gBAAN,EAAqBC,QAAQ,2CAA4CF,GACzEF,EAAMF,uB,uJCxbZ,EAAeO,EAAAA,EAAAA,OAAkB,CAC/B5I,KAAM,aAENC,MAAO,CACL4I,cAAezI,QACf0I,kBAAmB,CACjB3I,KAAMe,OACNb,QAAS,0BAEX0I,QAAS,CACP5I,KAAMe,OACNb,QAAS,gBAEX2I,OAAQ,CACN7I,KAAMe,OACNb,QAAS,gBAIbc,KAnB+B,WAoB7B,MAAO,CACL8H,mBAAoB5H,KAAKwH,gBAI7BvH,SAAU,CACRC,QADQ,WAEN,yBACK2H,EAAAA,EAAAA,QAAAA,SAAAA,QAAAA,KAAqC7H,OAD1C,IAEE,+BAA+B,EAC/B,qBAAqB,EACrB,yBAA0BA,KAAK4H,sBAGnCE,aATQ,WAUN,OAAI9H,KAAK4H,mBACA5H,KAAKyH,kBACHzH,KAAK+H,SACP/H,KAAK2H,OAEL3H,KAAK0H,SAMhBM,gBArBQ,WAsBN,IAAIhI,KAAKiI,YAAejI,KAAK4H,mBAC7B,OAAI5H,KAAKkI,UAAYlI,KAAKmI,eAAuB,QAC7CnI,KAAKoI,WAAmB,UACN,OAAlBpI,KAAKqI,SAA0BrI,KAAKsI,mBAAxC,IAKJ1F,MAAO,CACL4E,cADK,SACU9F,GAAG,WAEhB1B,KAAKoE,WAAU,kBAAO,EAAKwD,mBAAqBlG,MAElDkG,mBALK,SAKelG,GAClB1B,KAAK2B,MAAM,uBAAwBD,IAErCqG,SARK,WASE/H,KAAKwH,gBACVxH,KAAK4H,oBAAqB,KAI9B/D,QAAS,CACP0E,YADO,WAEL,MAAoCvI,KAAKwI,OAAvBC,GAAlB,EAAQC,OAAR,aACA,OAAO1I,KAAK2I,eAAe,MAAO,CAChCC,YAAa,sCACZ,CACD5I,KAAK2I,eAAeE,EAAAA,EAAO7I,KAAK8I,aAAa9I,KAAKgI,gBAAiB,CACjEpJ,MAAO,CACLmK,MAAO/I,KAAK+I,MACZC,KAAMhJ,KAAKgJ,KACXC,MAAOjJ,KAAKiJ,SAEZjJ,KAAK8H,cACT9H,KAAKuF,SAAS,YAAd,kBACKkD,GADL,IAEE,eAAgBzI,KAAK4H,mBACjB,QACA5H,KAAK+H,SAASmB,cAEpBlJ,KAAKmJ,UAAUnJ,KAAK8I,aAAa9I,KAAKoJ,iBAG1CC,eAtBO,WAuBL,MAAO,CACLrJ,KAAKuI,cACLvI,KAAKsJ,iB,gDCpGb,OAAeC,EAAAA,EAAAA,OAAW,CACxB5K,KAAM,aAEN6K,WAAY,CAAEC,OAAAA,EAAAA,GAEd7K,MAAO,CACL6K,OAAQ,CACN3K,KAAM,CAACC,QAAS2K,QAChB1K,SAAS,IAIb6E,QAAS,CACPsF,UADO,WACwB,IAApBrJ,EAAoB,uDAAF,GAC3B,OAAKE,KAAKyJ,QAEV3J,EAAK8I,YAAc,sCAEnB9I,EAAK0J,WAAa1J,EAAK0J,YAAc,GACrC1J,EAAK0J,WAAWG,KAAK,CACnBhL,KAAM,SACN0C,MAAO,CAAEuI,QAAQ,KAGZ5J,KAAK2I,eAAe,MAAO7I,IAVT,U,gICVzB,SAAU+J,EAAS1D,GACvBA,EAAEa,iBAIJ,QAAe8C,EAAAA,EAAAA,GACbjC,EAAAA,EACAkC,EAAAA,EACAC,EAAAA,GACAC,OAAO,CACPtL,KAAM,aAENuL,MAAO,CACLC,KAAM,aACNjD,MAAO,UAGTtI,MAAO,CACLwL,GAAIvK,OACJwK,WAAY,KACZC,WAAY,KACZC,UAAW,KACXxI,SAAU,CACRjD,KAAMC,QACNC,QAAS,MAEXwL,MAAO3K,QAGTC,KApBO,WAqBL,MAAO,CACLuI,SAAUrI,KAAKqK,WACfI,UAAWzK,KAAKqK,aAIpBpK,SAAU,CACRqI,cADQ,WAEN,GAAKtI,KAAK+H,SACV,OAAI/H,KAAK0K,MAAc1K,KAAK0K,MACxB1K,KAAK2K,SAAW3K,KAAK4K,UAAkB,QACpC,WAETC,WAPQ,WAQN,OAAyB,IAAlB7K,KAAK+B,UAAwC,OAAlB/B,KAAK+B,UAAqB+I,MAAMC,QAAQ/K,KAAKwC,gBAEjFuF,SAVQ,WAUA,WACA1G,EAAQrB,KAAKqB,MACb4B,EAAQjD,KAAKwC,cAEnB,OAAIxC,KAAK6K,aACFC,MAAMC,QAAQ9H,IAEZA,EAAMrC,MAAK,SAAAxB,GAAI,OAAI,EAAKmD,gBAAgBnD,EAAMiC,WAGhC2J,IAAnBhL,KAAKuK,gBAA+CS,IAApBhL,KAAKsK,WAChCjJ,EACHrB,KAAKuC,gBAAgBlB,EAAO4B,GAC5BlE,QAAQkE,GAGPjD,KAAKuC,gBAAgBU,EAAOjD,KAAKuK,YAE1C1I,QA5BQ,WA6BN,OAAO7B,KAAK+H,UAEdqB,YA/BQ,WAgCN,OAAQpJ,KAAKiI,YAAejI,KAAKgI,gBAE7BhI,KAAKgI,qBADLgD,IAKRpI,MAAO,CACLyH,WADK,SACO3I,GACV1B,KAAKyK,UAAY/I,EACjB1B,KAAKqI,SAAW3G,IAIpBmC,QAAS,CACPyF,SADO,WAEL,IAAMkB,EAAQ3C,EAAAA,EAAAA,QAAAA,QAAAA,SAAAA,KAAqC7H,MAEnD,OAAKwK,GAELA,EAAO1K,KAAMmL,GAAK,CAEhBC,MAAOrB,GAGFW,GAPYA,GASrBjF,SAbO,SAaGzG,EAAc4G,GACtB,OAAO1F,KAAK2I,eAAe,QAAS,CAClCjD,MAAOgE,OAAOyB,OAAO,CACnB,eAAgBnL,KAAK+H,SAASmB,WAC9BkC,SAAUpL,KAAKiI,WACfmC,GAAIpK,KAAKqL,WACTrF,KAAMlH,EACNA,KAAAA,GACC4G,GACHG,SAAU,CACRxE,MAAOrB,KAAKqB,MACZiK,QAAStL,KAAK+H,UAEhBkD,GAAI,CACF7H,KAAMpD,KAAKuL,OACXC,OAAQxL,KAAKyL,SACbC,MAAO1L,KAAKoG,QACZuF,QAAS3L,KAAK4L,UACdV,MAAOrB,GAETgC,IAAK,WAGTN,OApCO,WAqCLvL,KAAKiC,WAAY,GAEnBiE,QAvCO,SAuCEC,GACPnG,KAAKyL,WACLzL,KAAK2B,MAAM,QAASwE,IAEtBsF,SA3CO,WA2CC,WACN,GAAKzL,KAAK+E,cAAV,CAEA,IAAM1D,EAAQrB,KAAKqB,MACf4B,EAAQjD,KAAKwC,cAEjB,GAAIxC,KAAK6K,WAAY,CACdC,MAAMC,QAAQ9H,KACjBA,EAAQ,IAGV,IAAMnC,EAASmC,EAAMnC,OAErBmC,EAAQA,EAAM/D,QAAQ,SAAAE,GAAD,OAAgB,EAAKmD,gBAAgBnD,EAAMiC,MAE5D4B,EAAMnC,SAAWA,GACnBmC,EAAM0G,KAAKtI,QAGb4B,OAD4B+H,IAAnBhL,KAAKuK,gBAA+CS,IAApBhL,KAAKsK,WACtCtK,KAAKuC,gBAAgBU,EAAOjD,KAAKuK,WAAavK,KAAKsK,WAAatK,KAAKuK,UACpElJ,EACDrB,KAAKuC,gBAAgBU,EAAO5B,GAAS,KAAOA,GAE3C4B,EAGXjD,KAAK8L,UAAS,EAAM7I,GACpBjD,KAAKwC,cAAgBS,EACrBjD,KAAKqI,SAAWpF,IAElBmD,QAzEO,WA0ELpG,KAAKiC,WAAY,GAGnB2J,UA7EO,SA6EIzF","sources":["webpack://ict.itmo/../../../src/components/VAutocomplete/VAutocomplete.ts","webpack://ict.itmo/../../../src/components/VCheckbox/VCheckbox.ts","webpack://ict.itmo/../../../src/mixins/rippleable/index.ts","webpack://ict.itmo/../../../src/mixins/selectable/index.ts"],"sourcesContent":["// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      if (!this.autoSelectFirst) {\n        const preSelectedItem = oldVal[this.$refs.menu.listIndex]\n\n        if (preSelectedItem) {\n          this.setMenuIndex(val.findIndex(i => i === preSelectedItem))\n        } else {\n          this.setMenuIndex(-1)\n        }\n        this.$emit('update:list-index', this.$refs.menu.listIndex)\n      }\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n\n        if (this.autoSelectFirst && val.length) {\n          this.setMenuIndex(0)\n          this.$emit('update:list-index', this.$refs.menu.listIndex)\n        }\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      if (!this.multiple && value === '') this.deleteCurrentItem()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (\n        !this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (\n        !this.multiple &&\n        !this.valueComparator(\n          this.internalSearch,\n          this.getValue(this.internalValue)\n        )\n      ) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","// Styles\nimport './VCheckbox.sass'\nimport '../../styles/components/_selection-controls.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport VInput from '../VInput'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-checkbox',\n\n  props: {\n    indeterminate: Boolean,\n    indeterminateIcon: {\n      type: String,\n      default: '$checkboxIndeterminate',\n    },\n    offIcon: {\n      type: String,\n      default: '$checkboxOff',\n    },\n    onIcon: {\n      type: String,\n      default: '$checkboxOn',\n    },\n  },\n\n  data () {\n    return {\n      inputIndeterminate: this.indeterminate,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls': true,\n        'v-input--checkbox': true,\n        'v-input--indeterminate': this.inputIndeterminate,\n      }\n    },\n    computedIcon (): string {\n      if (this.inputIndeterminate) {\n        return this.indeterminateIcon\n      } else if (this.isActive) {\n        return this.onIcon\n      } else {\n        return this.offIcon\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.isDisabled && !this.inputIndeterminate) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n  },\n\n  watch: {\n    indeterminate (val) {\n      // https://github.com/vuetifyjs/vuetify/issues/8270\n      this.$nextTick(() => (this.inputIndeterminate = val))\n    },\n    inputIndeterminate (val) {\n      this.$emit('update:indeterminate', val)\n    },\n    isActive () {\n      if (!this.indeterminate) return\n      this.inputIndeterminate = false\n    },\n  },\n\n  methods: {\n    genCheckbox () {\n      const { title, ...checkboxAttrs } = this.attrs$\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.$createElement(VIcon, this.setTextColor(this.validationState, {\n          props: {\n            dense: this.dense,\n            dark: this.dark,\n            light: this.light,\n          },\n        }), this.computedIcon),\n        this.genInput('checkbox', {\n          ...checkboxAttrs,\n          'aria-checked': this.inputIndeterminate\n            ? 'mixed'\n            : this.isActive.toString(),\n        }),\n        this.genRipple(this.setTextColor(this.rippleState)),\n      ])\n    },\n    genDefaultSlot () {\n      return [\n        this.genCheckbox(),\n        this.genLabel(),\n      ]\n    },\n  },\n})\n","// Directives\nimport ripple from '../../directives/ripple'\n\n// Types\nimport Vue, { VNode, VNodeData, VNodeDirective } from 'vue'\n\nexport default Vue.extend({\n  name: 'rippleable',\n\n  directives: { ripple },\n\n  props: {\n    ripple: {\n      type: [Boolean, Object],\n      default: true,\n    },\n  },\n\n  methods: {\n    genRipple (data: VNodeData = {}): VNode | null {\n      if (!this.ripple) return null\n\n      data.staticClass = 'v-input--selection-controls__ripple'\n\n      data.directives = data.directives || []\n      data.directives.push({\n        name: 'ripple',\n        value: { center: true },\n      } as VNodeDirective)\n\n      return this.$createElement('div', data)\n    },\n  },\n})\n","// Components\nimport VInput from '../../components/VInput'\n\n// Mixins\nimport Rippleable from '../rippleable'\nimport Comparable from '../comparable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\nexport function prevent (e: Event) {\n  e.preventDefault()\n}\n\n/* @vue/component */\nexport default mixins(\n  VInput,\n  Rippleable,\n  Comparable\n).extend({\n  name: 'selectable',\n\n  model: {\n    prop: 'inputValue',\n    event: 'change',\n  },\n\n  props: {\n    id: String,\n    inputValue: null as any,\n    falseValue: null as any,\n    trueValue: null as any,\n    multiple: {\n      type: Boolean,\n      default: null,\n    },\n    label: String,\n  },\n\n  data () {\n    return {\n      hasColor: this.inputValue,\n      lazyValue: this.inputValue,\n    }\n  },\n\n  computed: {\n    computedColor (): string | undefined {\n      if (!this.isActive) return undefined\n      if (this.color) return this.color\n      if (this.isDark && !this.appIsDark) return 'white'\n      return 'primary'\n    },\n    isMultiple (): boolean {\n      return this.multiple === true || (this.multiple === null && Array.isArray(this.internalValue))\n    },\n    isActive (): boolean {\n      const value = this.value\n      const input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) return false\n\n        return input.some(item => this.valueComparator(item, value))\n      }\n\n      if (this.trueValue === undefined || this.falseValue === undefined) {\n        return value\n          ? this.valueComparator(value, input)\n          : Boolean(input)\n      }\n\n      return this.valueComparator(input, this.trueValue)\n    },\n    isDirty (): boolean {\n      return this.isActive\n    },\n    rippleState (): string | undefined {\n      return !this.isDisabled && !this.validationState\n        ? undefined\n        : this.validationState\n    },\n  },\n\n  watch: {\n    inputValue (val) {\n      this.lazyValue = val\n      this.hasColor = val\n    },\n  },\n\n  methods: {\n    genLabel () {\n      const label = VInput.options.methods.genLabel.call(this)\n\n      if (!label) return label\n\n      label!.data!.on = {\n        // Label shouldn't cause the input to focus\n        click: prevent,\n      }\n\n      return label\n    },\n    genInput (type: string, attrs: object) {\n      return this.$createElement('input', {\n        attrs: Object.assign({\n          'aria-checked': this.isActive.toString(),\n          disabled: this.isDisabled,\n          id: this.computedId,\n          role: type,\n          type,\n        }, attrs),\n        domProps: {\n          value: this.value,\n          checked: this.isActive,\n        },\n        on: {\n          blur: this.onBlur,\n          change: this.onChange,\n          focus: this.onFocus,\n          keydown: this.onKeydown,\n          click: prevent,\n        },\n        ref: 'input',\n      })\n    },\n    onBlur () {\n      this.isFocused = false\n    },\n    onClick (e: Event) {\n      this.onChange()\n      this.$emit('click', e)\n    },\n    onChange () {\n      if (!this.isInteractive) return\n\n      const value = this.value\n      let input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) {\n          input = []\n        }\n\n        const length = input.length\n\n        input = input.filter((item: any) => !this.valueComparator(item, value))\n\n        if (input.length === length) {\n          input.push(value)\n        }\n      } else if (this.trueValue !== undefined && this.falseValue !== undefined) {\n        input = this.valueComparator(input, this.trueValue) ? this.falseValue : this.trueValue\n      } else if (value) {\n        input = this.valueComparator(input, value) ? null : value\n      } else {\n        input = !input\n      }\n\n      this.validate(true, input)\n      this.internalValue = input\n      this.hasColor = input\n    },\n    onFocus () {\n      this.isFocused = true\n    },\n    /** @abstract */\n    onKeydown (e: Event) {},\n  },\n})\n"],"names":["defaultMenuProps","VSelectMenuProps","offsetY","offsetOverflow","transition","VSelect","name","props","allowOverflow","type","Boolean","default","autoSelectFirst","filter","Function","item","queryText","itemText","toLocaleLowerCase","indexOf","hideNoData","menuProps","noFilter","searchInput","String","data","lazySearch","this","computed","classes","selectedIndex","computedItems","filteredItems","selectedValues","selectedItems","map","getValue","hasDisplayedItems","hideSelected","some","hasItem","length","currentRange","selectedItem","getText","isSearching","internalSearch","allItems","value","getPropertyFromItem","text","get","set","val","$emit","isAnyValueAllowed","isDirty","searchIsDirty","multiple","menuCanShow","isFocused","$_menuProps","contentClass","trim","find","i","valueComparator","internalValue","listData","items","virtualizedItems","watch","document","addEventListener","onCopy","$refs","input","select","removeEventListener","blur","updateSelf","isMenuActive","hasSlot","oldVal","activateMenu","created","setSearch","destroyed","methods","onFilteredItemsChanged","preSelectedItem","menu","listIndex","setMenuIndex","findIndex","$nextTick","getTiles","onInternalSearchChanged","updateMenuDimensions","updateDimensions","changeSelectedIndex","keyCode","keyCodes","deleteCurrentItem","curIndex","curItem","isInteractive","getDisabled","lastIndex","nextIndex","nextItem","selectItem","setValue","clearableCallback","genInput","VTextField","mergeData","attrs","getObjectValueByPath","autocomplete","domProps","genInputSlot","slot","role","genSelections","onClick","e","onFocus","isAppendInner","target","onInput","badInput","validity","onKeyDown","ctrlKey","includes","onSpaceDown","onTabDown","onUpDown","preventDefault","setSelectedItems","event","currentItem","currentItemText","clipboardData","setData","Selectable","indeterminate","indeterminateIcon","offIcon","onIcon","inputIndeterminate","VInput","computedIcon","isActive","validationState","isDisabled","hasError","shouldValidate","hasSuccess","hasColor","computedColor","genCheckbox","attrs$","checkboxAttrs","title","$createElement","staticClass","VIcon","setTextColor","dense","dark","light","toString","genRipple","rippleState","genDefaultSlot","genLabel","Vue","directives","ripple","Object","push","center","prevent","mixins","Rippleable","Comparable","extend","model","prop","id","inputValue","falseValue","trueValue","label","lazyValue","color","isDark","appIsDark","isMultiple","Array","isArray","undefined","on","click","assign","disabled","computedId","checked","onBlur","change","onChange","focus","keydown","onKeydown","ref","validate"],"sourceRoot":""}